important info for repeating Alyssa's results:

solps-iter-data
pygitr

both help with preprocessing stuff

GITR_processing has the actual input/output

customer service:

cancel sirius xm radio service:

866 635 2349

account number: 489 721 1916 98

Captain!!! Could we make GITR into a conda environment? Then simply wrap it in a script and
then... read it into Galaxy? Could that be possible? Have to get rid of netcdf first...

You'd need to figure out how to make a conda package for HPC code?

Today:

1. Line up test cases from Tim. Hook into CTest.
2. Convert to build-time variables with runtime control flow ---> runtime vars runtime cflow
3. Migrate the options.txt file to the README
4. Add a link in the README to the GITR_processing repo
5. Tag a new release of GITR, submit for testing on the gitr channel

Later:

6. Start an issue-thon?
7. Ask about removing netcdf and multi-species/time-dependence tests? Similar to the Tim ones?
8. Meet with JonChan and Kurte Kudeep and Marthi if possible to talk about AGILE?
9. Work on the C++ file? Do it on Gitlab?
10. Do Galaxy stuff



SECTION FOR MULTI-DIM:

output histograms for GITR:

spec.nc

surface.nc

new convention:
netX0 to netX1 is endpoints and net_nX


SECTION FOR OPTIONS:

set( description "(no description added - see define_options.cmake)" )

system:

set( GITR_USE_CUDA 1 CACHE STRING "${description}" )
set( GITR_USE_MPI 0 CACHE STRING "${description}" )
set( GITR_USE_DOUBLE 1 CACHE STRING "${description}" )


on/off only - they can only be 1 or 0 and have to be the same

set( GITR_USE_IONIZATION 1 CACHE STRING "${description}" ) # if ionization is on, recombination on
set( GITR_USE_RECOMBINATION 1 CACHE STRING "${description}" )


0 - off
1 - straight field lines diffusion
(greater than 1) - curved field line diffusion
effectively 0 if ionization recombination are 0

set( GITR_USE_PERP_DIFFUSION 1 CACHE STRING "${description}" )


any permutation of these is sensible/allowed
these use input profiles
these are also binary options - only 0 or 1

set( GITR_USE_COULOMB_COLLISIONS 1 CACHE STRING "${description}" ) # if collisions are on, friction, scattering, heating. Thus just delete those 3
set( GITR_USE_FRICTION 1 CACHE STRING "${description}" )
set( GITR_USE_ANGLE_SCATTERING 1 CACHE STRING "${description}" )
set( GITR_USE_HEATING 1 CACHE STRING "${description}" )

can be 0 or 1 - another binary option
gradt_interp - uses 0 or 2 for constant or 2-dimensional
1: turn on, activates gradt_interp which can be 0 or 2
0: off, gradt_interp is ignored

set( GITR_USE_THERMAL_FORCE 0 CACHE STRING "${description}" )



binary option:
0: on
1: off
set( GITR_USE_SURFACE_MODEL 1 CACHE STRING "${description}" ) 


0: on
1: off

set( GITR_USE_SHEATH_EFIELD 1 CACHE STRING "${description}" )


0: on
1: off

this option is enabled by use_sheath_efield

set( GITR_BIASED_SURFACE 0 CACHE STRING "${description}" )


same as above, enabled by use_sheath_efield
0: on
1: off
should be mutually exclusive with biased surface. Only 1 should be on.
set( GITR_USE_SURFACE_POTENTIAL 0 CACHE STRING "${description}" )

enables particular input, additional electric field. Enables another option,
Efield_interp. If on, efield_interp specifies constant from input file
or 2 which comes from an interpolatable data field
0: off
1: on - efield_interp which can be 0 or 2

needs to be changed to just "use_efield"
0: off
1: on
set( GITR_USE_PRE_SHEATH_EFIELD 0 CACHE STRING "${description}" )

note: USE_* is 0 or 1, binary option.
interp: specifies some dimensionality, 0 or 2, constant vs data field interpolation


always should be on: there's no parent option here
set( GITR_BFIELD_INTERP 0 CACHE STRING "${description}" )


the next 3 are used by coulomb collisions

you need a temperature and density for ionization/recombination

temperature, density, and flowvelocity for coulombcollisions

set( GITR_TEMP_INTERP 2 CACHE STRING "${description}" )
set( GITR_DENSITY_INTERP 2 CACHE STRING "${description}" )
set( GITR_FLOWV_INTERP 0 CACHE STRING "${description}" )

set( GITR_GRADT_INTERP 0 CACHE STRING "${description}" )

deprecated
set( GITR_LC_INTERP 0 CACHE STRING "${description}" )

combine into 1 option
0:
>1: 
set( GITR_EFIELD_INTERP 0 CACHE STRING "${description}" )
set( GITR_PRE_SHEATH_INTERP 0 CACHE STRING "${description}" )

hidden option
set( GITR_GENERATE_LC 0 CACHE STRING "${description}" )

hidden option
set( GITR_ODE_INT 0 CACHE STRING "${description}" )

obvious option
set( GITR_FIXED_SEEDS 1 CACHE STRING "${description}" )

always on
set( GITR_PARTICLE_SEEDS 1 CACHE STRING "${description}" )

hiding? or deprecating. Not great for comparision
set( GITR_GEOM_TRACE 0 CACHE STRING "${description}" )


0: don't use at all
1: create a new hash depending on use_3d_tet_geom is?
2: read in previously created 2d hash
3: read in previously created 3d hash

set( GITR_GEOM_HASH 0 CACHE STRING "${description}" )
set( GITR_GEOM_HASH_SHEATH 0 CACHE STRING "${description}" )


recording things. Possibly not compatible with use_sort.
Might create a black hole

set( GITR_PARTICLE_TRACKS 0 CACHE STRING "${description}" )


creates checkable output file:

0: don't create

2: create 2d version

3: create 3d version?

histogram of density
affected somewhat by use_cylsymm, using r and z. So negative r doesn't make sense.
set( GITR_SPECTROSCOPY 2 CACHE STRING "${description}" )

binary variable
0: 3d off, 2d
1: 3d on, 3d
set( GITR_USE_3DTET_GEOM 0 CACHE STRING "${description}" )

variables:

r t z

0: x y z

1: r t z

cylindrical symm will project 2d geometries and profiles in theta direction ( toroidally )
if 3d_tet is on: does this for profiles, but not geometry. Because 3d geom is already in
3d no projection for curvature is needed.

profiles.nc is the only thing that is ever projected to cylindrical. 2d geometry is also
projected if cylsymm is on.

set( GITR_USE_CYLSYMM 0 CACHE STRING "${description}" )

deprecated
set( GITR_USE_FIELD_ALIGNED_VALUES 0 CACHE STRING "${description}" )

data collection file
set( GITR_FLUX_EA 1 CACHE STRING "${description}" )

not super important
set( GITR_FORCE_EVAL 0 CACHE STRING "${description}" )

on or off: keeps the same number of particles in the simulation
all stuff 

1: every 10k steps, stop, examine deposited particles, stop tracking them.
0: don't exclude particles based on weight thresholds

set( GITR_USE_SORT 0 CACHE STRING "${description}" )

set( GITR_CHECK_COMPATIBILITY 1 CACHE STRING "${description}" )

all should be combined into 1 option, is it a file or not?
directly from input file (point)
or is it coming from a file. Initial positions and velocities.
checkpointing
set( GITR_PARTICLE_SOURCE 0 CACHE STRING "${description}" )
set( GITR_PARTICLE_SOURCE_SPACE 0 CACHE STRING "${description}" )
set( GITR_PARTICLE_SOURCE_ENERGY 0 CACHE STRING "${description}" )
set( GITR_PARTICLE_SOURCE_ANGLE 0 CACHE STRING "${description}" )
set( GITR_PARTICLE_SOURCE_FILE 0 CACHE STRING "${description}" )

Everything below is just uneccesary information

add_compile_definitions( 
        USE_CUDA=${GITR_USE_CUDA}
        USE_MPI=${GITR_USE_MPI}
	USE_DOUBLE=${GITR_USE_DOUBLE}
        USEIONIZATION=${GITR_USE_IONIZATION}
        USERECOMBINATION=${GITR_USE_RECOMBINATION}
        USEPERPDIFFUSION=${GITR_USE_PERP_DIFFUSION}
        USECOULOMBCOLLISIONS=${GITR_USE_COULOMB_COLLISIONS}
        USEFRICTION=${GITR_USE_FRICTION}
        USEANGLESCATTERING=${GITR_USE_ANGLE_SCATTERING}
        USEHEATING=${GITR_USE_HEATING}
        USETHERMALFORCE=${GITR_USE_THERMAL_FORCE}
        USESURFACEMODEL=${GITR_USE_SURFACE_MODEL}
        USESHEATHEFIELD=${GITR_USE_SHEATH_EFIELD}
        BIASED_SURFACE=${GITR_BIASED_SURFACE}
        USE_SURFACE_POTENTIAL=${GITR_USE_SURFACE_POTENTIAL}
        USEPRESHEATHEFIELD=${GITR_USE_PRE_SHEATH_EFIELD}
        BFIELD_INTERP=${GITR_BFIELD_INTERP}
        LC_INTERP=${GITR_LC_INTERP}
        GENERATE_LC=${GITR_GENERATE_LC}
        EFIELD_INTERP=${GITR_EFIELD_INTERP}
        PRESHEATH_INTERP=${GITR_PRE_SHEATH_INTERP}
        DENSITY_INTERP=${GITR_DENSITY_INTERP}
        TEMP_INTERP=${GITR_TEMP_INTERP}
        FLOWV_INTERP=${GITR_FLOWV_INTERP}
        GRADT_INTERP=${GITR_GRADT_INTERP}
        ODEINT=${GITR_ODE_INT}
        FIXEDSEEDS=${GITR_FIXED_SEEDS}
        PARTICLESEEDS=${GITR_PARTICLE_SEEDS}
        GEOM_TRACE=${GITR_GEOM_TRACE}
        GEOM_HASH=${GITR_GEOM_HASH}
        GEOM_HASH_SHEATH=${GITR_GEOM_HASH_SHEATH}
        PARTICLE_TRACKS=${GITR_PARTICLE_TRACKS}
        PARTICLE_SOURCE=${GITR_PARTICLE_SOURCE}
        PARTICLE_SOURCE_SPACE=${GITR_PARTICLE_SOURCE_SPACE}
        PARTICLE_SOURCE_ENERGY=${GITR_PARTICLE_SOURCE_ENERGY}
        PARTICLE_SOURCE_ANGLE=${GITR_PARTICLE_SOURCE_ANGLE}
        PARTICLE_SOURCE_FILE=${GITR_PARTICLE_SOURCE_FILE}
        SPECTROSCOPY=${GITR_SPECTROSCOPY}
        USE3DTETGEOM=${GITR_USE_3DTET_GEOM}
        USECYLSYMM=${GITR_USE_CYLSYMM}
        USEFIELDALIGNEDVALUES=${GITR_USE_FIELD_ALIGNED_VALUES}
        FLUX_EA=${GITR_FLUX_EA}
        FORCE_EVAL=${GITR_FORCE_EVAL}
        USE_SORT=${GITR_USE_SORT}
        CHECK_COMPATIBILITY=${GITR_CHECK_COMPATIBILITY})
